
# Name:  Data::Store::Consistent

# Main features
 ===============
  + HoAoH store of data
    - always adheres to contraints
    - every node has an path like ID
    - read and write of nodes and subtrees
  + restricted read access
    - give methods IO object that has only access of node or subtree
  + restricted write access
    - typed (input checks)
    - only when value really changes
  + read and write events
    - triggered by read or write of nodes
    - recalculates other node values
    - with given callback
    - prevent circular dependencies


# Glossary

   schema: defines tree structure of data and properties of each nodes and triggers
   node: node in this data tree
   outer node (leave): holds data
   inner node: holds other nodes
   type: defines shape data has to adhere
   event: gets triggered when node is read, written or both
   callback: functions that gets called by event




 = inner:
    - help: ~
    - children: {}

 = outer:
    - help: ~
    - type: ~typename | ~typedef
    - ?default_value: $               # optional when type name given | to init
    - ?writer: &
    - $write_trigger: @node_path      # trigger writer when on of these nodes changes




structure:

   root: data, types,

    read_callbacks
    write_callbacks

    leave : type, default_value?, description ?
    node : type, children, description ?,


# Schema



callback:

    $name, $trigger, $target, $code

#Types:

 - enum()
   spos_int : int({1,})
   pattern : @[$nr]<str{$len}>
   color: @[3]<int{0,255}>
