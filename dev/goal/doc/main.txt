
# Name:  Data::Store::Consistent

# Main features
 ===============
  + HoAoH store of data
    - always adheres to contraints
    - every node has an path like ID
    - read and write of nodes and subtrees
  + restricted read access
    - give methods IO object that has only access of node or subtree
  + restricted write access
    - typed (input checks)
    - only when value really changes
  + read and write events
    - triggered by read or write of nodes
    - recalculates other node values
    - with given callback
    - prevent circular dependencies


# Glossary

   schema: defines tree structure of data and properties of each nodes and triggers
   node: node in this data tree
   outer node (leave): holds data
   inner node: holds other nodes
   type: defines shape data has to adhere
   event: gets triggered when node is read, written or both
   callback: functions that gets called by event


 = root : ?~node + %children
 = inner:
    1 ~name
    2 %children
    ----
    3 ~description
    4 ~permission: read(fill) copy(paste) paste(read) write(only copy) full(r+w)
    5 ~note
    =====
    - @read_trigger
    - @write_trigger

 = outer:
    1 ~name
    2 ~description
    3 ~permission
    4 ~type_def|%type_def:
    ----
    5 ? ~note
    6 ? $default_value
    7 !6 &writer:
    8 ?7 @writer_trigger: ~node_path ? when &writer :: node_name/node_name # on read event
    9 ?7 @writer_param: ~node_path ? when &writer :: node_name/node_name # on write event
   10 ? @type_param: ~node_path :: node_name/node_name                 # on write event
    =====
    - typechecker
    - equality_checker
    - @read_trigger
    - @write_trigger


# Permissions
          R      W
          ---------
          W      W    hidden    (RW only for writer code )
          L      -    constant  (read only locally at outer node)
          -      L    secret    (write only locally at outer node)
          G      L    write     (write always, read only from inner)
          L      G    read      (read always, write only from inner)
          L      L    full      (RW always)


# Schema



callback:

    $name, @trigger(event), $code

#Types:

 - enum()
   spos_int : int({1,})
   pattern : @[$nr]<str{$len}>
   color: @[3]<int{0,255}>
