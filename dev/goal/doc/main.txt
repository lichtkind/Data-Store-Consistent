
# Name:  Data::Store::Consistent

# Main features
 ===============
  + HoH store of data that always adheres to defined constraints
    - every node has an path like ID and other properties
    - read and write to leaves and subtrees (inner nodes)
  + restricted read and write access
    - optional permissions per node
    - create accessor objetcs with even less rights to cerain nodes
    - data put in has to be typed (adhere to input checks checks)
    - its a write only when value really changes
  + read and write events
    - triggered by read or write of nodes
    - causes to recalculate values of other nodes with given code or subroutine names
    - triggereing also other code
    - prevent circular dependencies


# Glossary

    DSC:        this module
    data tree:  data structure held by DSC
    nodes:      parts (chain links) of the data tree
    outer node: holds simple or complex compound value
    inner node: holds outer nodes as children
    schema:     data structure that defines a data tree with all node properties
    node_path:  adress of eatch node = path from root to it over node names: /name/name:READ
    node properties:
        (data) type: defines shape and properties of data one leave holds
        callback: functions that gets called by event
    event: routine that runs (triggeres) when a node is read or written
    callback


# Schema: HoH

# Node Properties

 = root : ?~node + %children
 = inner:
    1 ~name
    2 %children
    ----
    3 ~description
    4 ~permission --> #Permissions
    5 ~note
    =====
    - &read_trigger
    - &write_trigger
    - %callback : {read => {name => &sub}, write => {name => &sub}}

 = outer:
    1 ~name
    2 ~type | %type_def | { type => ''| type_def => {}|, argument => {name => '/path/to/node'}}
    3 ~description
    ----
    4 ~permission
    5 ~note
    6 $default_value
    7 %writer: {code => 'sub {...}', trigger => {name => 'node_path'}|'argument', -- argument => {name => '/path/to/node'}, }
    =====
    - &typechecker
    - &equality_checker
    - &read_trigger
    - &write_trigger
    - %callback : {read => {name => &sub}, write => {name => &sub}}


# Permissions:
    - either constnat: qw/full read write secret constant none/
    - or direct: 'full | read | write | none; bulk: full | read | write | none'

          R      W
          ---------
          -      -    none      (RW only for writer code )
          L      -    constant  (read only locally at outer node)
          -      L    secret    (write only locally at outer node)
          G      L    write     (write always, read only from inner)
          L      G    read      (read always, write only from inner)
          L      L    full      (RW always)

# Event
    - read
    - write


# Callback:
    - code:
    - trigger: { name => path:read}


# Types:
    + basic: num, int, str, bool
    + parametric:
    + argument:
    + property:
    + combinators:
    + examples:
        spos_int : int({1,})
        pattern : @[$nr]<str{$len}>
        color: @[3]<int{0,255}>
