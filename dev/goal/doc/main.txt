
# Name:  Data::Store::Consistent

# Main features
 ===============
  + HoH store of data that always adheres to defined constraints
    - every node has an path like ID and other properties
    - read and write to leaves and subtrees (inner nodes)
  + restricted read and write access
    - optional permissions per node
    - create accessor objetcs with even less rights to cerain nodes
    - data put in has to be typed (adhere to input checks checks)
    - its a write only when value really changes
  + read and write events
    - triggered by read or write of nodes
    - causes to recalculate values of other nodes with given code or subroutine names
    - triggereing also other code
    - prevent circular dependencies


# Glossary

    DSC: this module
    data tree: data structure held by DSC
    nodes: parts of the data tree
    leave aka outer node: node that actuall holds an adressable simple or complex compound value
    inner node or just node: node that actuall holds an adressable simple or complex compound value
    schema: data structure that defines a data tree with all node properties
    (data) type: defines shape and properties of data one leave holds
    event: routine that runs (triggeres) when a node is read or written
    callback: functions that gets called by event


# Node Properties

 = root : ?~node + %children
 = inner:
    1 ~name
    2 %children
    ----
    3 ~description
    4 ~permission: full read write secret constant hidden
                   direct:   ;  above:
    5 ~note
    =====
    - &read_trigger
    - &write_trigger

 = outer:
    1 ~name
    2 ~description
    3 ~permission
    4 ~type | %type_def: num{0,1} | {name => '', help => , code => '', argument => '/path/to/node'}
    ----
    5 ~note
    6 $default_value
    7 %writer: {code => '', trigger => '' -- arguments => ['/path/to/node'], }
    =====
    - &typechecker
    - &equality_checker
    - &read_trigger
    - &write_trigger


# Permissions
          R      W
          ---------
          W      W    hidden    (RW only for writer code )
          L      -    constant  (read only locally at outer node)
          -      L    secret    (write only locally at outer node)
          G      L    write     (write always, read only from inner)
          L      G    read      (read always, write only from inner)
          L      L    full      (RW always)


# Schema: HoH



callback:

    $name, @trigger(event), $code

# Types:

 - enum()
   spos_int : int({1,})
   pattern : @[$nr]<str{$len}>
   color: @[3]<int{0,255}>
